.program five_simd_ht16k33_busses
.define PUBLIC nbusses 5
.define PUBLIC data_mask 31
.side_set 1 // Side set the I2C clock, shared on all five busses.

// The PIO program will control data pin DIRECTIONS exclusively,
// thereby toggling between pulldown and hi-z
// (letting the pullup resistors on the busses make the values high).

// Data nibbles should be provided INVERTED (bitwise not) because a 1 means "pull the bus low" and a 0 means "let the bus float high".

// Each half-cycle of the I2C clock lasts for 16 PIO SM cycles (approximately).

    set pins, 0            side 1      // When pindirs are outputs, pull down.
.wrap_target
    set pindirs, 0         side 1 [13] // Bus idle
    pull block             side 1      // Pull the number of bytes to transmit (including the address), minus 1, into the OSR
    mov x osr              side 1      // X is the number of bytes left to transmit, minus 1

    set pindirs, data_mask side 1 [15] // Transmit start condition, pulling down data lines while leaving clock high.

begin_byte:
    set y, 1               side 0      // Transmit one additional nibble after this
begin_nibble:
    pull block             side 0      // Pull 4 bits (1 nibble) into the OSR (4 bits * five busses = 20 bits, wasting 12 bits)
    out pindirs, nbusses   side 0 [13] // Write a bit to each bus
    in pins, nbusses       side 1 [15] // Read a bit from each bus
    nop                    side 0
    out pindirs, nbusses   side 0 [14] // Write a bit to each bus
    in pins, nbusses       side 1 [15] // Read a bit from each bus
    nop                    side 0
    out pindirs, nbusses   side 0 [14] // Write a bit to each bus
    in pins, nbusses       side 1 [15] // Read a bit from each bus
    nop                    side 0
    out pindirs, nbusses   side 0 [14] // Write a bit to each bus
    in pins, nbusses       side 1      // Read a bit from each bus
    push block             side 1 [14] // Push 4 bits (1 nibble) into the OSR (4 bits * five busses = 20 bits, wasting 12 bits)
    jmp y-- begin_nibble   side 0
    pull block             side 0      // Pull ACKs/NACKs for this byte.
    out pindirs, nbusses   side 0 [13] // Write ACKs/NACKs for this byte.
    nop                    side 1
    in pins, nbusses       side 1 [13] // Receive acknowledges into ISR
    push block             side 1      // Push acknowledges for this byte.
    jmp x-- begin_byte     side 0

    set pindirs, data_mask side 0 [14] // Transmit stop condition
    nop                    side 1 [15]
.wrap

% c-sdk {
#include <limits>

static inline uint32_t spread_nibble_by_five(uint32_t nibble)
{
    uint32_t spread = 0;
    spread |= (nibble & 0x1) << 0;
    spread |= (nibble & 0x2) << 4;
    spread |= (nibble & 0x4) << 8;
    spread |= (nibble & 0x8) << 12;
    return spread;
}

static inline uint32_t condense_nibble_by_five(uint32_t nibble)
{
    uint32_t condensed = 0;
    condensed |= (nibble & 0x1) >> 0;
    condensed |= (nibble & 0x20) >> 4;
    condensed |= (nibble & 0x400) >> 8;
    condensed |= (nibble & 0x8000) >> 12;
    return condensed;
}

static inline bool five_simd_ht16k33_busses_program_try_begin_command(
    PIO pio,
    uint sm,
    size_t const cmd_length)
{
    if (pio_sm_is_tx_fifo_full(pio, sm))
    {
        // Try again later
        return false;
    }

    pio_sm_put(pio, sm, cmd_length);
    return true;
}

/* These three functions need to be called in sequence to send or receive a complete byte.
 * Each should be called repeatedly until it returns true.
 *
 * five_simd_ht16k33_busses_program_try_send_nibble_1(),
 * five_simd_ht16k33_busses_program_try_get_nibble_1(),
 * five_simd_ht16k33_busses_program_try_send_nibble_2(),
 * five_simd_ht16k33_busses_program_try_get_nibble_2(),
 * five_simd_ht16k33_busses_program_try_send_acks()
 * five_simd_ht16k33_busses_program_try_get_acks()
 */
static inline bool five_simd_ht16k33_busses_program_try_send_nibble_1(
    PIO pio,
    uint sm,
    uint8_t const x0,
    uint8_t const x1,
    uint8_t const x2,
    uint8_t const x3,
    uint8_t const x4)
{
    if (pio_sm_is_tx_fifo_full(pio, sm))
    {
        // Try again later
        return false;
    }

    uint32_t const nibble_set_hi = (spread_nibble_by_five((x0 & 0xf0) >> 4) << 0)
                                 | (spread_nibble_by_five((x1 & 0xf0) >> 4) << 1)
                                 | (spread_nibble_by_five((x2 & 0xf0) >> 4) << 2)
                                 | (spread_nibble_by_five((x3 & 0xf0) >> 4) << 3)
                                 | (spread_nibble_by_five((x4 & 0xf0) >> 4) << 4);

    pio_sm_put(pio, sm, ~nibble_set_hi << 12);
    return true;
}

static inline bool five_simd_ht16k33_busses_program_try_send_nibble_2(
    PIO pio,
    uint sm,
    uint8_t const x0,
    uint8_t const x1,
    uint8_t const x2,
    uint8_t const x3,
    uint8_t const x4)
{
    if (pio_sm_is_tx_fifo_full(pio, sm))
    {
        // Try again later
        return false;
    }

    uint32_t const nibble_set_lo = (spread_nibble_by_five((x0 & 0x0f) >> 0) << 0)
                                 | (spread_nibble_by_five((x1 & 0x0f) >> 0) << 1)
                                 | (spread_nibble_by_five((x2 & 0x0f) >> 0) << 2)
                                 | (spread_nibble_by_five((x3 & 0x0f) >> 0) << 3)
                                 | (spread_nibble_by_five((x4 & 0x0f) >> 0) << 4);

    pio_sm_put(pio, sm, ~nibble_set_lo << 12);
    return true;
}

static inline bool five_simd_ht16k33_busses_program_try_get_nibble_1(
    PIO pio,
    uint sm,
    uint8_t & x0,
    uint8_t & x1,
    uint8_t & x2,
    uint8_t & x3,
    uint8_t & x4)
{
    if (pio_sm_is_rx_fifo_empty(pio, sm))
    {
        // Try again later
        return false;
    }

    uint32_t const nibble_get_hi = pio_sm_get(pio, sm);

    x0 &= 0x0f;
    x1 &= 0x0f;
    x2 &= 0x0f;
    x3 &= 0x0f;
    x4 &= 0x0f;

    x0 |= condense_nibble_by_five(nibble_get_hi >> 0) << 4;
    x1 |= condense_nibble_by_five(nibble_get_hi >> 1) << 4;
    x2 |= condense_nibble_by_five(nibble_get_hi >> 2) << 4;
    x3 |= condense_nibble_by_five(nibble_get_hi >> 3) << 4;
    x4 |= condense_nibble_by_five(nibble_get_hi >> 4) << 4;

    return true;
}

static inline bool five_simd_ht16k33_busses_program_try_get_nibble_2(
    PIO pio,
    uint sm,
    uint8_t & x0,
    uint8_t & x1,
    uint8_t & x2,
    uint8_t & x3,
    uint8_t & x4)
{
    if (pio_sm_is_rx_fifo_empty(pio, sm))
    {
        // Try again later
        return false;
    }

    uint32_t const nibble_get_lo = pio_sm_get(pio, sm);

    x0 &= 0xf0;
    x1 &= 0xf0;
    x2 &= 0xf0;
    x3 &= 0xf0;
    x4 &= 0xf0;

    x0 |= condense_nibble_by_five(nibble_get_lo >> 0) << 0;
    x1 |= condense_nibble_by_five(nibble_get_lo >> 1) << 0;
    x2 |= condense_nibble_by_five(nibble_get_lo >> 2) << 0;
    x3 |= condense_nibble_by_five(nibble_get_lo >> 3) << 0;
    x4 |= condense_nibble_by_five(nibble_get_lo >> 4) << 0;

    return true;
}

static inline bool five_simd_ht16k33_busses_program_try_send_acks(
    PIO pio,
    uint sm,
    bool transmit_ack) // False to receive ACK instead.
{
    if (pio_sm_is_tx_fifo_full(pio, sm))
    {
        // Try again later
        return false;
    }

    pio_sm_put(pio, sm, (transmit_ack ? std::numeric_limits<uint32_t>::max() : 0));

    return true;
}

/* Returns true if all acks should have been received by now.
 * Sets all_acks_received to true if they were received. */
static inline bool five_simd_ht16k33_busses_program_try_get_acks(
    PIO pio,
    uint sm,
    bool expect_ack,
    bool & all_acks_match_expectation)
{
    if (pio_sm_is_rx_fifo_empty(pio, sm))
    {
        // Try again later
        return false;
    }

    uint32_t const ack_batch = pio_sm_get(pio, sm);

    uint32_t const expected_acks = expect_ack ? 0: 0x1f;
    all_acks_match_expectation = ack_batch == expected_acks;

    if (!all_acks_match_expectation)
    {
        printf("Actual acks: 0x%lx, Expected acks: 0x%lx\n", ack_batch, expected_acks);
    }
    return true;
}

static inline void five_simd_ht16k33_busses_program_init(PIO pio, uint sm, uint offset, double baud_rate, uint clock_pin, uint first_of_five_consecutive_data_pins)
{
    pio_sm_config c = five_simd_ht16k33_busses_program_get_default_config(offset);

    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, false, false, 32);

    // Side-set the shared clock pin.
    sm_config_set_sideset_pins(&c, clock_pin);

    // SET, OUT, and IN should all act on the data pins.
    sm_config_set_set_pins(&c, first_of_five_consecutive_data_pins, five_simd_ht16k33_busses_nbusses);
    sm_config_set_out_pins(&c, first_of_five_consecutive_data_pins, five_simd_ht16k33_busses_nbusses);
    sm_config_set_in_pins(&c, first_of_five_consecutive_data_pins);

    // Connect the GPIOs to the PIO instance.
    pio_gpio_init(pio, clock_pin);
    for (uint8_t i = 0; i < five_simd_ht16k33_busses_nbusses; ++i)
    {
        pio_gpio_init(pio, first_of_five_consecutive_data_pins + i);
    }

    // Set the baud rate
    sm_config_set_clkdiv(&c, 125000000.0/baud_rate/32.0);

    // Load our configuration
    pio_sm_init(pio, sm, offset, &c);

    // Clock pin is output.
    pio_sm_set_consecutive_pindirs(pio, sm, clock_pin, 1, true);
    // All data pins should begin as float high.
    pio_sm_set_consecutive_pindirs(pio, sm, first_of_five_consecutive_data_pins, five_simd_ht16k33_busses_nbusses, false);

    // All pins should become pull downs when outputs are enabled.
    pio_sm_set_pins(pio, sm, 0);

    // Start the program from the beginning
    pio_sm_set_enabled(pio, sm, true);
}
%}
